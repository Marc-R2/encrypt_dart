<?xml version="1.0" encoding="UTF-8"?>
<mutations version="1.0">
    <!-- The rules element describes all mutations done during a mutation test -->
    <!-- The following children are parsed: literal and regex -->
    <!-- A literal element matches the literal text -->
    <!-- A regex element mutates source code if the regular expression matches -->
    <!-- Each of them must have at least one mutation child -->
    <rules>
        <!-- A literal element matches the literal text and replaces it with the list of mutations  -->
        <literal text="&amp;&amp;">
            <mutation text="||"/>
        </literal>
        <literal text="||">
            <mutation text="&amp;&amp;"/>
        </literal>
        <literal text="+">
            <mutation text="-"/>
            <mutation text="*"/>
            <mutation text="/"/>
            <mutation text="%"/>
        </literal>
        <literal text="-">
            <mutation text="+"/>
            <mutation text="*"/>
            <mutation text="/"/>
            <mutation text="%"/>
        </literal>
        <literal text="*">
            <mutation text="+"/>
            <mutation text="-"/>
            <mutation text="/"/>
            <mutation text="%"/>
        </literal>
        <literal text="/">
            <mutation text="*"/>
            <mutation text="+"/>
            <mutation text="-"/>
            <mutation text="%"/>
        </literal>
        <literal text="==">
            <mutation text="!="/>
            <mutation text=">"/>
            <mutation text="<"/>
            <mutation text=">="/>
            <mutation text="<="/>
        </literal>
        <literal text="&lt;=">
            <mutation text="=="/>
            <mutation text="&lt;"/>
        </literal>
        <literal text="&gt;=">
            <mutation text="=="/>
            <mutation text="&gt;"/>
        </literal>
        <literal text="!=">
            <mutation text="=="/>
            <mutation text="<"/>
            <mutation text=">"/>
            <mutation text="<="/>
            <mutation text=">="/>
        </literal>
        <!-- <literal text="<">
            <mutation text=">"/>
            <mutation text="<="/>
            <mutation text=">="/>
            <mutation text="=="/>
            <mutation text="!="/>
        </literal>
        <literal text=">">
            <mutation text="<"/>
            <mutation text="<="/>
            <mutation text=">="/>
            <mutation text="=="/>
            <mutation text="!="/>
        </literal> -->

        <literal text="!">
            <mutation text=""/>
        </literal>
        <literal text="true">
            <mutation text="false"/>
        </literal>
        <literal text="false">
            <mutation text="true"/>
        </literal>


        <!-- It is also possible to match a regular expression with capture groups. -->
        <!-- If the optional attribute dotAll is set to true, then the . will also match newlines.  -->
        <!-- If not present, the default value for dotAll is false.  -->
        <!-- Here, we capture everything inside of the braces of "if ()" -->
        <regex pattern="[\s]if[\s]*\((.*?)\)[\s]*{" dotAll="true">
            <!-- You can access groups via $1. -->
            <!-- If your string contains a $ followed by a number that should not be replaced, escape the dollar \$ -->
            <!-- If your string contains a \$ followed by a number that should not be replaced, escape the slash \\$ -->
            <!-- Tabs and newlines should also be escaped. -->
            <mutation text=" if (!($1)) {"/>
        </regex>

        <!-- Matches long chains of && -->
        <regex pattern="&amp;([^&amp;()]+?)&amp;" dotAll="true">
            <mutation text="&amp;!($1)&amp;"/>
        </regex>

        <!-- Matches long chains of || -->
        <regex pattern="\|([^|()]+?)\|" dotAll="true">
            <mutation text="|!($1)|"/>
        </regex>
        <regex pattern="\(([^$(]*?)&amp;&amp;([^$()]*?)\)">
            <mutation text="(!($1)&amp;&amp;$2)"/>
            <mutation text="($1&amp;&amp;!($2))"/>
        </regex>
        <regex pattern="\(([^|(]*?)\|\|([^()|]*?)\)">
            <mutation text="(!($1)||$2)"/>
            <mutation text="($1||!($2))"/>
        </regex>

        <!-- Replace start of conditional block -->
        <regex pattern="if\s*\(([^|&amp;\)]*?)([|&amp;][|&amp;])">
            <mutation text="if (!($1)$2"/>
        </regex>

        <!-- Replace end of conditional block -->
        <regex pattern="([|&amp;][|&amp;])([^|&amp;]*?)\)">
            <mutation text="$1!($2))"/>
        </regex>
        <regex pattern="([|&amp;][|&amp;])[\s]*?\(" dotAll="true">
            <mutation text="$1!("/>
        </regex>

        <!-- Replaces numbers with negative values -->
        <regex pattern="([\s=\(])([1-9\.]+[0-9]+|0\.0*[1-9])">
            <mutation text="$1-$2"/>
        </regex>

        <!-- switch function call arguments. Matches 2 args -->
        <regex pattern="([\s][a-zA-z]*?[^\(;\s]*?)\s*\(([^,]*),([^,]*)\)\s*;">
            <mutation text="$1($3,$2);"/>
        </regex>

        <!-- switch function call arguments. Matches 3 args -->
        <regex pattern="([\s][a-zA-z]*?[^\(;\s{}]*?)\s*\(([^,\n\(]*),([^,\n\(]*),([^,\n\(]*)\)\s*;">
            <mutation text="$1($3,$2,$4);"/>
            <mutation text="$1($2,$4,$3);"/>
        </regex>

        <!-- switch function call arguments. Matches 4 args -->
        <regex pattern="([\s][a-zA-z]*?[^\(;\s{}]*?)\s*\(([^,\n\(]*),([^,\n\(]*),([^,\n\(]*),([^,\n\(]*)\)\s*;">
            <mutation text="$1($3,$2,$4,$5);"/>
            <mutation text="$1($2,$4,$3,$5);"/>
            <mutation text="$1($2,$3,$5,$4);"/>
        </regex>

        <!-- switch ternary operator arguments -->
        <regex pattern="([^\s]*)\s*\?\s*([^:]*)\s*:\s*([^;]*);">
            <mutation text="$1 ? $3 : $2;"/>
            <mutation text="!$1 ? $2 : $3;"/>
        </regex>
        <!-- switch ternary operator arguments inline -->
        <regex pattern="([^\s]*)\s*\?\s*([^:]*)\s*:\s*([^;]*),">
            <mutation text="$1 ? $3 : $2,"/>
            <mutation text="!$1 ? $2 : $3,"/>
        </regex>

        <!-- change for loop arguments -->
        <regex pattern="for\s*\(\s*([^;]+);\s*([^;]+);\s*([^\)]+)\s*\)\s*{">
            <mutation text="for ($1; $2; $2) {"/>
            <mutation text="for ($1; true; $3) {"/>
            <mutation text="for ($1; false; $3) {"/>
        </regex>

        <!-- change logical operator -->
        <regex pattern="!([a-zA-Z0-9_]+)">
            <mutation text="$1"/>
        </regex>

        <regex pattern="if[\s]*\(([a-zA-Z0-9_]+)\)[\s]*{">
            <mutation text="if (!$1) {"/>
            <mutation text="if (!($1)) {"/>
        </regex>

        <regex pattern="is ([a-zA-Z0-9_]+)">
            <mutation text="is! $1"/>
        </regex>

        <regex pattern="is! ([a-zA-Z0-9_]+)">
            <mutation text="is $1"/>
        </regex>

        <regex pattern="([^\s]+)\s*\?\?\s*([^\s;]+)">
            <mutation text="$2 ?? $1"/>
            <mutation text="$2 ?? $2"/>
            <mutation text="$1 ?? $1"/>
        </regex>

    </rules>
    <!-- This element creates a blacklist, allowing you to exclude parts from the mutations -->
    <exclude>
        <!-- excludes anything between two tokens  -->
        <!-- single line comments  -->
        <token begin="//" end="\n"/>
        <!-- exclude dart exports and imports  -->
        <token begin="export &apos;" end="&apos;;"/>
        <token begin="import &apos;" end="&apos;;"/>
        <token begin="export &quot;" end="&quot;;"/>
        <token begin="import &quot;" end="&quot;;"/>

        <!-- exclude dart part and part of  -->
        <token begin="part &apos;" end="&apos;;"/>
        <token begin="part of &apos;" end="&apos;;"/>
        <token begin="part &quot;" end="&quot;;"/>
        <token begin="part of &quot;" end="&quot;;"/>

        <!-- excludes anything that matches a pattern  -->
        <!-- multi line comments  -->
        <regex pattern="/[*].*?[*]/" dotAll="true"/>

        <!-- exclude increment and decrement operators. Produces mostly false positives.  -->
        <regex pattern="\+\+"/>
        <regex pattern="--"/>

        <!-- exclude loops to prevent infinte tests -->
        <regex pattern="[\s]for[\s]*\(.*?\)[\s]*{" dotAll="true"/>
        <regex pattern="[\s]while[\s]*\(.*?\)[\s]*{.*?}" dotAll="true"/>

        <!-- lines can also be globally excluded  -->
        <!-- line index starts at 1  -->
        <!-- lines begin="1" end="2"/-->
    </exclude>

    <!-- Configures the reporting thresholds as percentage of detected mutations -->
    <!-- Attribute failure is required and must be a floating point number. -->
    <!-- Note: There can only be one threshold element in all input files! -->
    <!-- If no threshold element is found, these values will be used. -->
    <threshold failure="75">
        <!-- Provides reliability rating levels. Attributes are required. -->
        <rating over="99" name="A"/>
        <rating over="84" name="B"/>
        <rating over="78" name="C"/>
        <rating over="52" name="D"/>
        <rating over="38" name="E"/>
        <rating over="20" name="F"/>
        <rating over="0" name="WTF"/>
    </threshold>
</mutations>
